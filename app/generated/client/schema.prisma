generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                     String                  @id @default(uuid())
  email                  String                  @unique
  emailVerified          DateTime?
  password               String
  name                   String?
  image                  String?
  accounts               Account[]
  role                   UserRole                @default(USER)
  isTwoFactorEnabled     Boolean                 @default(false)
  isOAuth                Boolean                 @default(false)
  tournaments            Tournament[]            @relation("UserTournaments")
  participants           Participant[]           @relation("UserParticipants")
  matchHistories         MatchHistory[]          @relation("UserMatchHistories")
  twoFactorConfirmations TwoFactorConfirmation[]
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String // Changed to String to match User.id
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid()) @map("_id")
  userId String // Changed to String to match User.id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Tournament {
  id              String          @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  competitionType CompetitionType
  scoreType       ScoreType
  participants    Participant[]
  matches         Match[]
  createdBy       User            @relation("UserTournaments", fields: [userId], references: [id])
  userId          String // Changed to String to match User.id
}

model Participant {
  id             String         @id @default(uuid())
  tournament     Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId   String // Changed to String to match Tournament.id
  user           User           @relation(fields: [userId], references: [id], name: "UserParticipants")
  userId         String // Changed to String to match User.id
  seed           Int
  matchHistories MatchHistory[]
}

model Match {
  id             String         @id @default(uuid())
  tournament     Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId   String // Changed to String to match Tournament.id
  round          Int
  matchHistories MatchHistory[]
}

model MatchHistory {
  id            String      @id @default(uuid())
  match         Match       @relation(fields: [matchId], references: [id])
  matchId       String // Changed to String to match Match.id
  participant   Participant @relation(fields: [participantId], references: [id])
  participantId String // Changed to String to match Participant.id
  user          User        @relation(fields: [userId], references: [id], name: "UserMatchHistories")
  userId        String // Changed to String to match User.id
  isWinner      Boolean
  score         Int
}

enum CompetitionType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  HYBRID
  ROUND_ROBIN
}

enum ScoreType {
  PRO_SET
  REGULAR_SET
  TIEBREAKER
}
